// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package com.nicoletfear.Stronghold2016.subsystems;

import com.nicoletfear.Stronghold2016.RobotMap;
import com.nicoletfear.Stronghold2016.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {
	
	
	
	//CANTalon objects
	public CANTalon backLeft = new CANTalon(RobotMap.backLeftPort);
	public CANTalon backRight = new CANTalon(RobotMap.backRightPort);
	public CANTalon frontLeft = new CANTalon(RobotMap.frontLeftPort);
	public CANTalon frontRight = new CANTalon(RobotMap.frontRightPort);
	
	public int rawCodesPerRev = RobotMap.OPTION8_CODES_PER_REV;
	public double gearBoxRatio = RobotMap.OPTION8_GEARBOX_RATIO;
	public int error = (int) (rawCodesPerRev * gearBoxRatio / RobotMap.ERROR_CONSTANT);
	
	public DriveTrain(){
		//follower code
		backLeft.changeControlMode(CANTalon.TalonControlMode.Follower);
		backRight.changeControlMode(CANTalon.TalonControlMode.Follower);
		frontLeft.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		frontRight.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		backLeft.set(RobotMap.frontLeftPort);
		backRight.set(RobotMap.frontRightPort);
		frontLeft.setInverted(true);
		//this inverts the cantalons on the left side
		
		//PID code
	    frontRight.setProfile(0);
	    frontLeft.setProfile(0);
	    frontRight.setF(RobotMap.F);
	    frontLeft.setF(RobotMap.F);
	    frontRight.setP(RobotMap.P);
	    frontLeft.setP(RobotMap.P);
	    frontRight.setI(RobotMap.I);
	    frontLeft.setI(RobotMap.I);
	    frontRight.setD(RobotMap.D);
	    frontLeft.setD(RobotMap.D);
	    
	    //Sets encoder revolutions
		frontRight.configEncoderCodesPerRev((int) (rawCodesPerRev * gearBoxRatio));
    	frontLeft.configEncoderCodesPerRev((int) (rawCodesPerRev * gearBoxRatio));
    	frontRight.setEncPosition(0);
    	frontLeft.setEncPosition(0);
    	//Sets the tolerance of the talons
       	frontRight.setAllowableClosedLoopErr(error);
    	frontLeft.setAllowableClosedLoopErr(error);
	}
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
    }
    
	public void brake(){
		//zero is to brake
    	frontRight.set(0);
    	frontLeft.set(0);
    }


	public void drive(double leftInput, double rightInput) {
		//scales between 1 and 1
		//did this because we don't know what the maximum speed of the motors is
		double leftOutput = leftInput * RobotMap.scaling;
		double rightOutput = rightInput * RobotMap.scaling;
		frontLeft.set(leftOutput);
		frontRight.set(rightOutput);
	}
}

